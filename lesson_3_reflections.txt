When would you want to use a remote repository rather than keeping all your work local?
When I would like to work from several different computers.
When there is someone else who also works on the project.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Because if I'm working on the project, I would like to have unchanged version of files,
but not to find out that files are rewritten because of somebody pushed some code to GitHub.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
I would use fork if I want to modify someone else code, but I don't have permission to update code on GitHub.
I would use clone when I would need to copy repository to my local machine.
I would use branch when I would need to create experimental version of code or code for some particular group of users.

What is the benefit of having a copy of the last known state of the remote stored locally?
It gives you clue that something is changed on remote and may be you should merge while it is relatively easy to do.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Not such greate way is to use Araxis Merge and comment every change with BEGIN and END marks.
For example:
BEGIN_NEW_FEATURE_NAME
int j = 3;
END_NEW_FEATURE_NAME
But Araxis merge approach pollute code dramatically.
Git approach definitely MUCH better.

When would you want to make changes in a separate branch rather than directly in master?
If I'm the only one developer and changes are relatively simple, probably I would make them directly in the master branch.
In other cases, if I need to get approval from another people or if I make a big changes, I would make them in a separate branches.

What benefits does each approach have?
It takes less efforts to use only master branch.
